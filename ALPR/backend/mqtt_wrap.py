# backend/mqtt_wrap.py
from __future__ import annotations

import threading
import paho.mqtt.client as mqtt

from backend.logger import log
from backend.config import MQTT_BROKER, MQTT_PORT, MQTT_USER, MQTT_PASS, TOPIC_PREFIX
import backend.state as state


class MQTTWrap:
    """
    –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ paho-mqtt –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –º–æ–¥—É–ª–µ–º ALPR_OLD.py.
    """

    def __init__(self, on_message_cb=None):
        self.client = mqtt.Client()
        self.on_message_cb = on_message_cb
        self._lock = threading.Lock()

        if MQTT_USER:
            self.client.username_pw_set(MQTT_USER, MQTT_PASS or "")

        self.client.on_connect = self._on_connect
        self.client.on_disconnect = self._on_disconnect
        self.client.on_message = self._on_message

    # -----------------------
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–ª–ª–±–µ–∫–∏
    # -----------------------

    def _on_connect(self, client, userdata, flags, rc):
        if rc == 0:
            log(f"üîå MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω ({MQTT_BROKER}:{MQTT_PORT})")
            state.set_mqtt_connected(True)
            try:
                topic = f"{TOPIC_PREFIX}/#"
                client.subscribe(topic)
                log(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {topic}")
            except Exception as e:
                log(f‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        else:
            log(f"‚ùå MQTT –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: rc={rc}")
            state.set_mqtt_connected(False)

    def _on_disconnect(self, client, userdata, rc):
        state.set_mqtt_connected(False)
        log("üîå MQTT –æ—Ç–∫–ª—é—á–µ–Ω")

    def _on_message(self, client, userdata, msg):
        if self.on_message_cb:
            try:
                self.on_message_cb(client, userdata, msg)
            except Exception as e:
                log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}", debug=True)

    # -----------------------
    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # -----------------------

    def start(self, loop_async: bool = True):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç MQTT loop (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ).
        """
        try:
            self.client.connect(MQTT_BROKER, MQTT_PORT, keepalive=30)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: {e}")
            state.set_mqtt_connected(False)
            return

        if loop_async:
            self.client.loop_start()
        else:
            self.client.loop_forever()

    def publish(self, topic: str, payload: str, retain: bool = False) -> bool:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ MQTT. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
        """
        try:
            with self._lock:
                full_topic = f"{TOPIC_PREFIX}/{topic}"
                self.client.publish(full_topic, payload, retain=retain)
            log(f"‚û°Ô∏è MQTT {full_topic} = {payload}", debug=True)
            return True
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ MQTT: {e}")
            return False

    def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç MQTT loop.
        """
        try:
            self.client.loop_stop()
            self.client.disconnect()
        except Exception:
            pass


# -----------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
# -----------------------

_mqtt_wrap: MQTTWrap | None = None


def start_mqtt(on_message_cb=None) -> MQTTWrap:
    global _mqtt_wrap
    if _mqtt_wrap is None:
        _mqtt_wrap = MQTTWrap(on_message_cb=on_message_cb)
        _mqtt_wrap.start()
    return _mqtt_wrap


def publish_message(topic: str, payload: str, retain: bool = False) -> bool:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ —è–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É.
    """
    if _mqtt_wrap:
        return _mqtt_wrap.publish(topic, payload, retain)
    return False
