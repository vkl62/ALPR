# backend/db.py
from __future__ import annotations

import os
import sqlite3
import threading
import time
from typing import Optional, Dict, Any, Tuple

from backend.config import DB_HISTORY_PATH, DB_PEOPLE_PATH
from backend.logger import log

# -----------------------
# –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î (–ª–µ–Ω–∏–≤—ã–µ, –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
# -----------------------

_history_conn_lock = threading.Lock()
_people_conn_lock = threading.Lock()
_history_conn: Optional[sqlite3.Connection] = None
_people_conn: Optional[sqlite3.Connection] = None


def _row_factory(cursor, row):
    return {d[0]: row[idx] for idx, d in enumerate(cursor.description)}


def _connect(path: str) -> sqlite3.Connection:
    conn = sqlite3.connect(path, check_same_thread=False)
    conn.row_factory = _row_factory
    # –ù–µ–º–Ω–æ–≥–æ –ø—Ä–∞–≥–º –ø–æ–¥ –∑–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π
    with conn:
        conn.execute("PRAGMA journal_mode=WAL;")
        conn.execute("PRAGMA synchronous=NORMAL;")
        conn.execute("PRAGMA foreign_keys=ON;")
    return conn


def _get_history_conn() -> sqlite3.Connection:
    global _history_conn
    if _history_conn is None:
        with _history_conn_lock:
            if _history_conn is None:
                os.makedirs(os.path.dirname(DB_HISTORY_PATH) or ".", exist_ok=True)
                _history_conn = _connect(DB_HISTORY_PATH)
                _init_history_db(_history_conn)
    return _history_conn


def _get_people_conn() -> sqlite3.Connection:
    global _people_conn
    if _people_conn is None:
        with _people_conn_lock:
            if _people_conn is None:
                os.makedirs(os.path.dirname(DB_PEOPLE_PATH) or ".", exist_ok=True)
                _people_conn = _connect(DB_PEOPLE_PATH)
                _init_people_db(_people_conn)
    return _people_conn


# -----------------------
# –°—Ö–µ–º—ã –∏ –º–∏–≥—Ä–∞—Ü–∏–∏
# -----------------------

def _init_history_db(conn: sqlite3.Connection) -> None:
    """
    –¢–∞–±–ª–∏—Ü—ã:
      history(id, plate, point, ts)
      last_seen(plate primary key, ts) ‚Äî –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
    """
    with conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS history(
              id     INTEGER PRIMARY KEY AUTOINCREMENT,
              plate  TEXT NOT NULL,
              point  TEXT NOT NULL,
              ts     INTEGER NOT NULL
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS last_seen(
              plate TEXT PRIMARY KEY,
              ts    INTEGER NOT NULL
            );
            """
        )
        # –ò–Ω–¥–µ–∫—Å—ã
        conn.execute("CREATE INDEX IF NOT EXISTS idx_history_plate_ts ON history(plate, ts DESC);")
        conn.execute("CREATE INDEX IF NOT EXISTS idx_history_ts ON history(ts);")


def _init_people_db(conn: sqlite3.Connection) -> None:
    """
    –ë–∞–∑–∞ ¬´–ª—é–¥–µ–π¬ª (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞).
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è:
      plates(plate TEXT PRIMARY KEY, fio TEXT, brand TEXT, address TEXT)
    –ï—Å–ª–∏ —É —Ç–µ–±—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ ‚Äî –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –Ω–µ–π, –≤–∞–∂–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ plate.
    """
    with conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS plates(
              plate   TEXT PRIMARY KEY,
              fio     TEXT,
              brand   TEXT,
              address TEXT
            );
            """
        )


# -----------------------
# –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –º–æ–¥—É–ª–µ–º)
# -----------------------

def init_db() -> None:
    """
    –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–µ–∏—Ö –ë–î (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, —Ç.–∫. lazy).
    """
    _ = _get_history_conn()
    _ = _get_people_conn()
    log("üóÑÔ∏è DB: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def add_history_record(plate: str, point: str, ts: Optional[int] = None) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç last_seen.
    """
    if not plate:
        return
    if ts is None:
        ts = int(time.time())

    conn = _get_history_conn()
    with conn:
        conn.execute(
            "INSERT INTO history(plate, point, ts) VALUES(?, ?, ?)",
            (plate, point, ts),
        )
        # upsert –≤ last_seen
        conn.execute(
            """
            INSERT INTO last_seen(plate, ts) VALUES(?, ?)
            ON CONFLICT(plate) DO UPDATE SET ts=excluded.ts
            """,
            (plate, ts),
        )
    # –æ—Ç–ª–∞–¥–∫–∞
    log(f"üìù –ò—Å—Ç–æ—Ä–∏—è: {plate} @ {point} ({ts})", debug=True)


def get_last_seen(plate: str) -> Optional[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –Ω–æ–º–µ—Ä–∞.
    –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ —Ç–∞–±–ª–∏—Ü–µ last_seen.
    """
    if not plate:
        return None
    conn = _get_history_conn()
    row = conn.execute("SELECT ts FROM last_seen WHERE plate = ?", (plate,)).fetchone()
    return int(row["ts"]) if row and row.get("ts") is not None else None


def get_plate_from_db(base: str) -> Optional[str]:
    """
    –î–æ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ –±–∞–∑–µ –ª—é–¥–µ–π, –µ—Å–ª–∏ —É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞.
    –õ–æ–≥–∏–∫–∞:
      1) –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ people –ø–æ –ø–æ–ª—é plate (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ base —É–∂–µ –ø–æ–ª–Ω—ã–π).
      2) –ò—â–µ–º plate, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ base –∏ –¥–∞–ª—å—à–µ –∏–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞ (1‚Äì3 —Ü–∏—Ñ—Ä—ã).
         –í—ã–±–∏—Ä–∞–µ–º ¬´–Ω–∞–∏–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ¬ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤).
    –ü—Ä–∏–º–µ—Ä—ã:
      base='–í368–†–ú' ‚Üí –Ω–∞–π–¥—ë—Ç '–í368–†–ú62'
      base='A123AA' ‚Üí –Ω–∞–π–¥—ë—Ç 'A123AA777'
    """
    if not base:
        return None
    conn = _get_people_conn()

    # 1) —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    row = conn.execute(
        "SELECT plate FROM plates WHERE plate = ? LIMIT 1",
        (base,),
    ).fetchone()
    if row and row.get("plate"):
        return row["plate"]

    # 2) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å base + —Ä–µ–≥–∏–æ–Ω (1-3 —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ)
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: SQLite LIKE –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –Ω–æ –ª—É—á—à–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞—Ä–∞–Ω–µ–µ.
    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä–∞ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤–æ –≤–Ω–µ—à–Ω–µ–º –∫–æ–¥–µ.
    like_pat = base + "%"

    rows = conn.execute(
        """
        SELECT plate FROM plates
        WHERE plate LIKE ?
        """,
        (like_pat,),
    ).fetchall()

    # –û—Ç–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ —Ö–≤–æ—Å—Ç ‚Äî 1-3 —Ü–∏—Ñ—Ä—ã
    best: Tuple[str, int] | None = None
    for r in rows or []:
        p = r.get("plate") or ""
        tail = p[len(base):]
        if tail.isdigit() and 1 <= len(tail) <= 3:
            # –í—ã–±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞ —Å–ª—É—á–∞–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏)
            cand = (p, len(p))
            if best is None or cand[1] > best[1]:
                best = cand

    return best[0] if best else None


# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)
# -----------------------

def fetch_history(plate: Optional[str] = None, limit: int = 100, offset: int = 0) -> list[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏, —Å–≤–µ–∂–∏–µ –ø–µ—Ä–≤—ã–º–∏.
    """
    conn = _get_history_conn()
    if plate:
        rows = conn.execute(
            """
            SELECT plate, point, ts
            FROM history
            WHERE plate = ?
            ORDER BY ts DESC
            LIMIT ? OFFSET ?
            """,
            (plate, limit, offset),
        ).fetchall()
    else:
        rows = conn.execute(
            """
            SELECT plate, point, ts
            FROM history
            ORDER BY ts DESC
            LIMIT ? OFFSET ?
            """,
            (limit, offset),
        ).fetchall()
    return rows or []


def upsert_person_plate(plate: str, fio: Optional[str] = None, brand: Optional[str] = None, address: Optional[str] = None) -> None:
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ people.db (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–∑ –∞–¥–º–∏–Ω–∫–∏).
    """
    if not plate:
        return
    conn = _get_people_conn()
    with conn:
        conn.execute(
            """
            INSERT INTO plates(plate, fio, brand, address)
            VALUES(?, ?, ?, ?)
            ON CONFLICT(plate) DO UPDATE SET
              fio=COALESCE(excluded.fio, fio),
              brand=COALESCE(excluded.brand, brand),
              address=COALESCE(excluded.address, address)
            """,
            (plate, fio, brand, address),
        )
    log(f"üë§ People: —Å–æ—Ö—Ä–∞–Ω—ë–Ω {plate}", debug=True)


def close_connections() -> None:
    """
    –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞).
    """
    global _history_conn, _people_conn
    with _history_conn_lock:
        if _history_conn is not None:
            try:
                _history_conn.close()
            except Exception:
                pass
            _history_conn = None
    with _people_conn_lock:
        if _people_conn is not None:
            try:
                _people_conn.close()
            except Exception:
                pass
            _people_conn = None
