# backend/processing.py
from __future__ import annotations

import time
from datetime import datetime

from backend import db, text_utils, state, gates
from backend.logger import log
from backend.mqtt_wrap import publish_message


def handle_recognized_plate(point: str, plate_raw: str, ts: int | None = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (–æ—Ç CPAI).
    –í–∫–ª—é—á–∞–µ—Ç:
      - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é,
      - –¥–æ—Å—Ç—Ä–æ–π–∫—É —Ä–µ–≥–∏–æ–Ω–∞ (–ø–æ –±–∞–∑–µ people.db),
      - –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤,
      - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é,
      - –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ MQTT,
      - –≤—ã–∑–æ–≤ –ª–æ–≥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ—Ç–∞–º–∏.
    """
    plate = text_utils.normalize_text(plate_raw)
    if not plate:
        log(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {plate_raw}")
        return

    base, region = text_utils.parse_plate_parts(plate)

    # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –∏—â–µ–º –≤ –±–∞–∑–µ
    if base and not region:
        full_plate = db.get_plate_from_db(base)
        if full_plate:
            log(f"‚úÖ –î–æ—Å—Ç—Ä–æ–µ–Ω –Ω–æ–º–µ—Ä: {plate} ‚Üí {full_plate}")
            plate = full_plate

    if not plate:
        log(f"‚ö†Ô∏è –ù–æ–º–µ—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω: {plate_raw}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è)
    if state.is_plate_recent(point, plate):
        log(f"‚è© –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ {plate} ({point})")
        return

    ts = ts or int(time.time())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    db.add_history_record(plate, point, ts)

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ MQTT
    publish_plate(point, plate, ts)

    # –õ–æ–≥–∏–∫–∞ –≤–æ—Ä–æ—Ç
    gates.handle_plate(point, plate, ts)


def publish_plate(point: str, plate: str, ts: int):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ –≤ MQTT.
    """
    last_seen = db.get_last_seen(plate)
    data = {
        "plate": plate,
        "point": point,
        "ts": ts,
        "last_seen": last_seen,
        "iso_time": datetime.fromtimestamp(ts).isoformat(),
    }
    import json
    payload = json.dumps(data, ensure_ascii=False)
    publish_message("plates", payload)
    log(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–æ–º–µ—Ä: {plate} ({point})")
