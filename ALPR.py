# ALPR.py
from __future__ import annotations

import json
import time
from datetime import datetime

from backend import cpai, db, text_utils, state
from backend.mqtt_wrap import start_mqtt, publish_message
from backend.logger import log
from backend.config import TOPIC_PREFIX


# -----------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç MQTT (–∫–∞–º–µ—Ä—ã / BlueIris)
# -----------------------

def on_mqtt_message(client, userdata, msg):
    try:
        payload = msg.payload.decode("utf-8", errors="ignore")
    except Exception:
        payload = ""
    log(f"üì• MQTT {msg.topic} = {payload}", debug=True)

    # –û–∂–∏–¥–∞–µ–º JSON –≤–∏–¥–∞ {"point": "Vorota", "snapshot": "path/to/file.jpg"}
    try:
        data = json.loads(payload)
    except Exception:
        log("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ MQTT-—Å–æ–æ–±—â–µ–Ω–∏–∏", debug=True)
        return

    point = data.get("point") or "unknown"
    snapshot_path = data.get("snapshot")

    if not snapshot_path:
        log(f"‚ö†Ô∏è –ù–µ—Ç snapshot –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {point}")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    process_snapshot(point, snapshot_path)


# -----------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞
# -----------------------

def process_snapshot(point: str, snapshot_path: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –æ—Ç –∫–∞–º–µ—Ä—ã.
    """
    log(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω –∫–∞–¥—Ä –æ—Ç {point}: {snapshot_path}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ CPAI
    try:
        results = cpai.send_to_cpai(snapshot_path)
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ CPAI: {e}")
        state.set_cpai_connected(False)
        return

    state.set_cpai_connected(True)

    if not results:
        log(f"‚ÑπÔ∏è CPAI: –Ω–æ–º–µ—Ä–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –¥–ª—è {point}")
        return

    for plate_raw in results:
        plate = text_utils.normalize_text(plate_raw)
        base, region = text_utils.parse_plate_parts(plate)

        # –ï—Å–ª–∏ –±–∞–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ—Ç ‚Äî –∏—â–µ–º –¥–æ—Å—Ç—Ä–æ–π–∫—É –≤ people.db
        if base and not region:
            full_plate = db.get_plate_from_db(base)
            if full_plate:
                log(f"‚úÖ –î–æ—Å—Ç—Ä–æ–µ–Ω –Ω–æ–º–µ—Ä: {plate} ‚Üí {full_plate}")
                plate = full_plate

        if not plate:
            log(f"‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {plate_raw}")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
        if state.is_plate_recent(point, plate):
            log(f"‚è© –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ {plate} ({point})")
            continue

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        ts = int(time.time())
        db.add_history_record(plate, point, ts)

        # MQTT –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        publish_plate(point, plate, ts)


def publish_plate(point: str, plate: str, ts: int):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤ MQTT.
    """
    last_seen = db.get_last_seen(plate)
    data = {
        "plate": plate,
        "point": point,
        "ts": ts,
        "last_seen": last_seen,
        "iso_time": datetime.fromtimestamp(ts).isoformat(),
    }
    payload = json.dumps(data, ensure_ascii=False)
    publish_message("plates", payload)
    log(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–æ–º–µ—Ä: {plate} ({point})")


# -----------------------
# –ó–∞–ø—É—Å–∫
# -----------------------

def start():
    log("üöÄ ALPR –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω")
    db.init_db()
    start_mqtt(on_message_cb=on_mqtt_message)
